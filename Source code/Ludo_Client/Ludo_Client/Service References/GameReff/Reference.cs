//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ludo_Client.GameReff {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="LudoServer", ConfigurationName="GameReff.IGame", CallbackContract=typeof(Ludo_Client.GameReff.IGameCallback))]
    public interface IGame {
        
        [System.ServiceModel.OperationContractAttribute(Action="LudoServer/IGame/RollDie", ReplyAction="LudoServer/IGame/RollDieResponse")]
        int RollDie();
        
        [System.ServiceModel.OperationContractAttribute(Action="LudoServer/IGame/RollDie", ReplyAction="LudoServer/IGame/RollDieResponse")]
        System.Threading.Tasks.Task<int> RollDieAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="LudoServer/IGame/NewGame", ReplyAction="LudoServer/IGame/NewGameResponse")]
        void NewGame(LudoService.Player[] players);
        
        [System.ServiceModel.OperationContractAttribute(Action="LudoServer/IGame/NewGame", ReplyAction="LudoServer/IGame/NewGameResponse")]
        System.Threading.Tasks.Task NewGameAsync(LudoService.Player[] players);
        
        [System.ServiceModel.OperationContractAttribute(Action="LudoServer/IGame/MovePiece", ReplyAction="LudoServer/IGame/MovePieceResponse")]
        void MovePiece(System.Drawing.Color PieceColor, int CurrentPosition);
        
        [System.ServiceModel.OperationContractAttribute(Action="LudoServer/IGame/MovePiece", ReplyAction="LudoServer/IGame/MovePieceResponse")]
        System.Threading.Tasks.Task MovePieceAsync(System.Drawing.Color PieceColor, int CurrentPosition);
        
        [System.ServiceModel.OperationContractAttribute(Action="LudoServer/IGame/AddMessage", ReplyAction="LudoServer/IGame/AddMessageResponse")]
        void AddMessage(string playername, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="LudoServer/IGame/AddMessage", ReplyAction="LudoServer/IGame/AddMessageResponse")]
        System.Threading.Tasks.Task AddMessageAsync(string playername, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="LudoServer/IGame/Subscribe", ReplyAction="LudoServer/IGame/SubscribeResponse")]
        bool Subscribe();
        
        [System.ServiceModel.OperationContractAttribute(Action="LudoServer/IGame/Subscribe", ReplyAction="LudoServer/IGame/SubscribeResponse")]
        System.Threading.Tasks.Task<bool> SubscribeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="LudoServer/IGame/Unsubscribe", ReplyAction="LudoServer/IGame/UnsubscribeResponse")]
        bool Unsubscribe();
        
        [System.ServiceModel.OperationContractAttribute(Action="LudoServer/IGame/Unsubscribe", ReplyAction="LudoServer/IGame/UnsubscribeResponse")]
        System.Threading.Tasks.Task<bool> UnsubscribeAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="LudoServer/IGame/OnRollDie")]
        void OnRollDie(LudoService.Player player, int dieresult);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="LudoServer/IGame/OnPlayerTurn")]
        void OnPlayerTurn(LudoService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="LudoServer/IGame/OnMovePiece")]
        void OnMovePiece(LudoService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="LudoServer/IGame/onMessageAdded")]
        void onMessageAdded(System.DateTime timestamp, string playerName, string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameChannel : Ludo_Client.GameReff.IGame, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GameClient : System.ServiceModel.DuplexClientBase<Ludo_Client.GameReff.IGame>, Ludo_Client.GameReff.IGame {
        
        public GameClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public GameClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public GameClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public int RollDie() {
            return base.Channel.RollDie();
        }
        
        public System.Threading.Tasks.Task<int> RollDieAsync() {
            return base.Channel.RollDieAsync();
        }
        
        public void NewGame(LudoService.Player[] players) {
            base.Channel.NewGame(players);
        }
        
        public System.Threading.Tasks.Task NewGameAsync(LudoService.Player[] players) {
            return base.Channel.NewGameAsync(players);
        }
        
        public void MovePiece(System.Drawing.Color PieceColor, int CurrentPosition) {
            base.Channel.MovePiece(PieceColor, CurrentPosition);
        }
        
        public System.Threading.Tasks.Task MovePieceAsync(System.Drawing.Color PieceColor, int CurrentPosition) {
            return base.Channel.MovePieceAsync(PieceColor, CurrentPosition);
        }
        
        public void AddMessage(string playername, string message) {
            base.Channel.AddMessage(playername, message);
        }
        
        public System.Threading.Tasks.Task AddMessageAsync(string playername, string message) {
            return base.Channel.AddMessageAsync(playername, message);
        }
        
        public bool Subscribe() {
            return base.Channel.Subscribe();
        }
        
        public System.Threading.Tasks.Task<bool> SubscribeAsync() {
            return base.Channel.SubscribeAsync();
        }
        
        public bool Unsubscribe() {
            return base.Channel.Unsubscribe();
        }
        
        public System.Threading.Tasks.Task<bool> UnsubscribeAsync() {
            return base.Channel.UnsubscribeAsync();
        }
    }
}
